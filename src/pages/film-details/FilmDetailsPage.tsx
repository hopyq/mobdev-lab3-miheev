import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getFilmDetails } from '@/shared/api/omdbApi';
import { useFilmStore } from '@/features/film/model/filmStore';
import { Button } from '@/shared/components/Button/Button';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const translateField = (field: string) => {
  const translations: Record<string, string> = {
    'Title': '–ù–∞–∑–≤–∞–Ω–∏–µ',
    'Year': '–ì–æ–¥',
    'Rated': '–†–µ–π—Ç–∏–Ω–≥',
    'Released': '–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞',
    'Runtime': '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
    'Genre': '–ñ–∞–Ω—Ä',
    'Director': '–†–µ–∂–∏—Å—Å–µ—Ä',
    'Writer': '–°—Ü–µ–Ω–∞—Ä–∏—Å—Ç',
    'Actors': '–ê–∫—Ç–µ—Ä—ã',
    'Plot': '–°—é–∂–µ—Ç',
    'Language': '–Ø–∑—ã–∫',
    'Country': '–°—Ç—Ä–∞–Ω–∞',
    'Awards': '–ù–∞–≥—Ä–∞–¥—ã',
    'Poster': '–ü–æ—Å—Ç–µ—Ä',
    'Ratings': '–†–µ–π—Ç–∏–Ω–≥–∏',
    'Metascore': 'Metascore',
    'imdbRating': '–†–µ–π—Ç–∏–Ω–≥ IMDb',
    'imdbVotes': '–ì–æ–ª–æ—Å–æ–≤ –Ω–∞ IMDb',
    'imdbID': 'ID IMDb',
    'Type': '–¢–∏–ø',
    'DVD': '–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ DVD',
    'BoxOffice': '–°–±–æ—Ä—ã',
    'Production': '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ',
    'Website': '–°–∞–π—Ç',
    'Response': '–û—Ç–≤–µ—Ç'
  };

  return translations[field] || field;
};

export const FilmDetailsPage: React.FC = () => {
  const { imdbID } = useParams<{ imdbID: string }>();
  const [film, setFilm] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();
  const { likeFilm, unlikeFilm, isFilmLiked, defaultFilms } = useFilmStore();

  useEffect(() => {
    const fetchFilmDetails = async () => {
      try {
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ñ–∏–ª—å–º—ã
        const defaultFilm = defaultFilms.find(f => f.imdbID === imdbID);
        if (defaultFilm) {
          setFilm(defaultFilm);
          return;
        }

        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–∑ API
        const data = await getFilmDetails(imdbID || '');
        
        if (data.Response === 'True') {
          setFilm(data);
        } else {
          setError(data.Error || '–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } catch (err) {
        setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å–º–∞');
      } finally {
        setLoading(false);
      }
    };

    fetchFilmDetails();
  }, [imdbID, defaultFilms]);

  const handleLikeClick = () => {
    if (!film) return;
    
    if (isFilmLiked(film.imdbID)) {
      unlikeFilm(film.imdbID);
    } else {
      likeFilm({
        Title: film.Title,
        Year: film.Year,
        imdbID: film.imdbID,
        Type: film.Type,
        Poster: film.Poster,
      });
    }
  };

  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div>{error}</div>;
  if (!film) return <div>–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

  return (
    <div>
      <Button onClick={() => navigate(-1)}>–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É</Button>
      
      <div style={{ 
        display: 'flex', 
        gap: '2rem', 
        marginTop: '2rem',
        textAlign: 'left'
      }}>
        <div style={{ flex: '0 0 300px' }}>
          <img
            src={film.Poster !== 'N/A' ? film.Poster : 'https://via.placeholder.com/300x450?text=No+Poster'}
            alt={film.Title}
            style={{ width: '100%', borderRadius: '8px' }}
          />
        </div>
        
        <div style={{ flex: 1 }}>
          <h1>{film.Title} ({film.Year})</h1>
          
          <button
            onClick={handleLikeClick}
            style={{ 
              background: 'none', 
              border: 'none', 
              cursor: 'pointer',
              color: isFilmLiked(film.imdbID) ? 'red' : 'inherit',
              fontSize: '1rem',
              marginBottom: '1rem'
            }}
          >
            {isFilmLiked(film.imdbID) ? '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º' : 'ü§ç –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
          </button>
          
          {Object.entries(film).map(([key, value]) => {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è –∏ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª–∏
            if (['Title', 'Year', 'Poster', 'Response', 'imdbID', 'Type'].includes(key)) return null;
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            if (key === 'Ratings') {
              return (
                <div key={key}>
                  <h3>{translateField(key)}:</h3>
                  <ul style={{ listStyle: 'none', padding: 0 }}>
                    {(value as any[]).map((rating, index) => (
                      <li key={index}>
                        <strong>{rating.Source}:</strong> {rating.Value}
                      </li>
                    ))}
                  </ul>
                </div>
              );
            }
            
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            return (
              <p key={key}>
                <strong>{translateField(key)}:</strong> {value}
              </p>
            );
          })}
        </div>
      </div>
    </div>
  );
};